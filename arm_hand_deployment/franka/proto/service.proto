syntax = "proto3";

service FrankaService{
    // RPC to start the robot
    rpc Start (Empty) returns (Result);

    // RPC to stop the robot
    rpc Stop (Empty) returns (Result);

    // Get joint positions (7 arm joints + 1 gripper width).
    rpc GetJointPositions(Empty) returns (JointPositions);

    // Get end effector pose (3 xyz + 3 rpy).
    rpc GetEndEffectorPose(Empty) returns (Pose);

    // Move to specific joint positions (7 arm joints).
    rpc MoveToJointPositions(MoveToJointPositionsRequest) returns (Result);

    // Move to a specific end effector pose (3 xyz + 3 rpy).
    rpc MoveToEndEffectorPose(Pose) returns (Result);

    // Set gripper width. >0 fully closes the gripper, <0 opens to |value| * 0.08.
    rpc SetGripperAction(GripperAction) returns (Result);

    // 3 (delta xyz) + 3 (delta rpy)
    rpc ControllDeltaEndEffectorPose(DeltaPose) returns (Result);

    // 7 (arm joints)
    rpc ControlJointPositions(JointPositions) returns (Result);

    rpc GetGripperMessage(Empty) returns (GripperMessage);

    rpc StopGripper(Empty) returns (Result);
}


message Empty {}

message MoveToJointPositionsRequest {
    repeated float positions = 1;
    int32 num_interpolation_steps = 2;
}

message JointPositions {
    repeated float positions = 1;
}

message Pose {
    repeated float pose = 1; // xyz and rpy
}

message DeltaPose {
    repeated float delta_pose = 1; // delta xyz and delta rpy
}


message GripperAction{
    float value = 1;
}

message GripperMessage{
    bool is_grasped = 1;
}


message Result {
    oneof result {
        Ok ok = 1;
        Err err = 2;
    }
}

message Ok {}


message Err {
    string message = 1;
}